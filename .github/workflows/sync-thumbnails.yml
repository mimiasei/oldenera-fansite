name: üñºÔ∏è Sync Generated Thumbnails

on:
  repository_dispatch:
    types: [sync-thumbnails]
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-thumbnails:
    name: Download and Deploy Thumbnails
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üìä Check Sync Status
        id: status
        run: |
          echo "Checking sync status..."
          
          # Get raw response and save to file for easier processing
          curl -s "https://oldenera-fansite.onrender.com/api/thumbnailsync/status" > /tmp/status.json
          
          echo "Raw API response:"
          cat /tmp/status.json
          echo ""
          
          # Validate JSON structure
          if ! jq empty /tmp/status.json 2>/dev/null; then
            echo "‚ùå Invalid JSON response from API"
            echo "Response content:"
            cat /tmp/status.json
            exit 1
          fi
          
          # Note: Not storing raw JSON in output to avoid formatting issues
          # The parsed values below are what we actually need
          
          # Extract values with more robust error handling
          PENDING_COUNT=$(jq -r '.totalPending // 0' /tmp/status.json 2>/dev/null || echo "0")
          PENDING_THUMBNAILS=$(jq -r '.pendingThumbnails // 0' /tmp/status.json 2>/dev/null || echo "0")
          PENDING_LARGE=$(jq -r '.pendingLarge // 0' /tmp/status.json 2>/dev/null || echo "0")
          
          # Validate the extracted values
          if ! [[ "$PENDING_COUNT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Invalid totalPending value: $PENDING_COUNT"
            PENDING_COUNT=0
          fi
          
          echo "Parsed values: total=$PENDING_COUNT, thumbnails=$PENDING_THUMBNAILS, large=$PENDING_LARGE"
          
          echo "pending_count=$PENDING_COUNT" >> $GITHUB_OUTPUT
          echo "pending_thumbnails=$PENDING_THUMBNAILS" >> $GITHUB_OUTPUT
          echo "pending_large=$PENDING_LARGE" >> $GITHUB_OUTPUT
          
          if [ "$PENDING_COUNT" = "0" ] || [ "$PENDING_COUNT" = "null" ]; then
            echo "No pending thumbnails found"
            echo "has_pending=false" >> $GITHUB_OUTPUT
          else
            echo "Found $PENDING_COUNT pending thumbnails ($PENDING_THUMBNAILS thumbnails + $PENDING_LARGE large)"
            echo "has_pending=true" >> $GITHUB_OUTPUT
          fi
          
          # Cleanup
          rm -f /tmp/status.json

      - name: üì¶ Download Pending Thumbnails
        if: steps.status.outputs.has_pending == 'true'
        run: |
          echo "Downloading pending thumbnails..."
          
          # Download with better error handling
          if ! curl -L --fail "https://oldenera-fansite.onrender.com/api/thumbnailsync/download-pending" --output thumbnails.zip; then
            echo "‚ùå Failed to download thumbnails"
            exit 1
          fi
          
          # Verify zip file
          if [ ! -f thumbnails.zip ] || [ ! -s thumbnails.zip ]; then
            echo "‚ùå Downloaded file is empty or missing"
            exit 1
          fi
          
          echo "Downloaded $(du -h thumbnails.zip | cut -f1) zip file"
          
          # Extract to frontend directory structure
          mkdir -p frontend/public/images/screenshots/thumbnails
          mkdir -p frontend/public/images/screenshots/large
          
          # Extract with error handling
          if ! unzip -j thumbnails.zip "thumbnails/*" -d frontend/public/images/screenshots/thumbnails/ 2>/dev/null; then
            echo "‚ö†Ô∏è No thumbnails/ directory in zip or extraction failed"
          fi
          
          if ! unzip -j thumbnails.zip "large/*" -d frontend/public/images/screenshots/large/ 2>/dev/null; then
            echo "‚ö†Ô∏è No large/ directory in zip or extraction failed"
          fi
          
          rm thumbnails.zip
          
          # Count extracted files
          THUMB_COUNT=$(find frontend/public/images/screenshots/thumbnails/ -name "*.webp" -o -name "*.jpg" 2>/dev/null | wc -l)
          LARGE_COUNT=$(find frontend/public/images/screenshots/large/ -name "*.webp" -o -name "*.jpg" 2>/dev/null | wc -l)
          TOTAL_COUNT=$((THUMB_COUNT + LARGE_COUNT))
          
          echo "Extracted $TOTAL_COUNT files ($THUMB_COUNT thumbnails, $LARGE_COUNT large)"
          echo "extracted_count=$TOTAL_COUNT" >> $GITHUB_ENV

      - name: üìù Commit and Push Changes
        if: steps.status.outputs.has_pending == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          
          # Add all new thumbnail files
          git add frontend/public/images/screenshots/thumbnails/ 2>/dev/null || true
          git add frontend/public/images/screenshots/large/ 2>/dev/null || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            COMMIT_COUNT="${{ env.extracted_count }}"
            [ -z "$COMMIT_COUNT" ] && COMMIT_COUNT="unknown"
            
            git commit -m "üñºÔ∏è Auto-sync $COMMIT_COUNT generated thumbnails
            - WebP and JPEG thumbnails for optimized loading
            - Generated via backend image processing  
            - Batch sync from temporary storage"
            
            git push
            echo "‚úÖ Changes committed and pushed successfully"
          fi

      - name: üßπ Mark Thumbnails as Synced
        if: steps.status.outputs.has_pending == 'true'
        run: |
          echo "Marking thumbnails as synced on backend..."
          RESPONSE=$(curl -s -X POST "https://oldenera-fansite.onrender.com/api/thumbnailsync/mark-synced")
          echo "Backend cleanup response: $RESPONSE"
          
      - name: üìä Summary
        run: |
          if [ "${{ steps.status.outputs.has_pending }}" = "true" ]; then
            EXTRACTED_COUNT="${{ env.extracted_count }}"
            [ -z "$EXTRACTED_COUNT" ] && EXTRACTED_COUNT="some"
            echo "‚úÖ Successfully synced $EXTRACTED_COUNT thumbnails"
            echo "üöÄ Thumbnails now available via Vercel CDN"
          else
            echo "‚ÑπÔ∏è No pending thumbnails found - nothing to sync"
          fi
